from os.path import joinfrom os import listdirfrom keras.models import load_modelfrom keras.optimizers import Adamfrom scipy import  miscfrom keras.callbacks import ModelCheckpointimport numpy as npfrom modelSRCNN import build_model, psnrimport matplotlib.pyplot as pltbaseDir          = r"D:\Arnaud\data_croutinet\ottawa\data"model_dir        = join(baseDir, "models")super_dir        = join(baseDir, "superResolution")train_dir        = join(super_dir, "train")preprocessed_dir = join(super_dir, "preprocessed_gaussian_blur_sigma1")result_dir       = join(super_dir,"result")preprocessed_train       = join(preprocessed_dir, "train")preprocessed_train_data  = join(preprocessed_train,"input")preprocessed_train_label = join(preprocessed_train, "label")preprocessed_validation       = join(preprocessed_dir, "validation")preprocessed_validation_data  = join(preprocessed_validation, "input")preprocessed_validation_label = join(preprocessed_validation, "label")IMG_SIZE = 33INPUT_SHAPE = (None, None, 1)def load(dir):    array = np.array([misc.imread(join(dir, f), mode='YCbCr')[ :, :, 0] for f in listdir(dir)])    array = np.expand_dims(array.astype(float), axis=3)    array = array.astype('float32') / 255    return array#model = build_model(INPUT_SHAPE)model = load_model(join(model_dir, "SRCNN_gaussian_blur_check.h5"), custom_objects={'psnr': psnr})adam = Adam(lr=0.00001)model.compile(optimizer=adam, loss='mse', metrics=[psnr])print("loading training data")data = load(preprocessed_train_data)print("loading training labels")label = load(preprocessed_train_label)print("loading validation data")val_data = load(preprocessed_validation_data)print("loading validation labels")val_label = load(preprocessed_validation_label)checkpoint = ModelCheckpoint(join(model_dir, "SRCNN_gaussian_blur__sigma1_check.h5"), monitor='val_loss', verbose=1, save_best_only=True,                             save_weights_only=False, mode='min')history = model.fit(data, label, batch_size=16, validation_data=(val_data, val_label),callbacks=[checkpoint], epochs=200)epochs = range(1, len(history.history['loss']) + 1)plt.figure()plt.subplot(2, 1, 1)plt.plot(epochs, history.history['psnr'], 'bo', label='Training psnr')plt.plot(epochs, history.history['val_psnr'], 'r', label='Validation psnr')plt.title('Training accuracy and Validation mean_squared_error')plt.legend()plt.subplot(2, 1, 2)plt.plot(epochs, history.history['loss'], 'bo', label='Training loss')plt.plot(epochs, history.history['val_loss'], 'r', label='Validation loss')plt.title('Validation loss and Training loss')plt.legend()plt.show()